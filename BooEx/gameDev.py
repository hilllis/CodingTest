########################################
# 게임개발 캐릭터 이동 문제                  #
# 제한시간 40분 시간 제한 1초 메모리 제한 128MB#
#######################################
# 문제 요약
# N x M의 직사각형 안에 각각의 칸은 육지 또는 바다.
# 캐릭터는 동서남북 중 한 곳을 바라보고 있다.
# 캐릭터는 한 칸씩 이동하며 육지로만 이동할 수 있다.
# 룰 1) 캐릭터는 현재 위치에서 현재 방향 기준으로 왼쪽 방향 부터 갈 곳을 정한다.
# 룰 2) 캐릭터의 바로 왼쪽 방향에 가보지 않은 칸 존재하면 왼쪽 방향으로 회전 후 왼쪽으로 한칸 전진. 만약 왼쪽에 가보지 않은 칸이 없다면 왼쪽 방향으로 회전만 수행하고 1단계로 돌아간다.
# 룰 3) 만약 네 방향 모두 이미 가본 칸이거나 바다로 되어 있는 경우 바라보는 방향 유지한채 한 칸 뒤로 가고 1단계로 돌아간다. 이때 뒤쪽 칸이 바다인 칸이라 뒤로 갈 수 없는 경우 움직임 멈춘다.

#########################################
# 내 아이디어
# 무한 루프로 실행
# 캐릭터가 바라보는 방향에 대한 배열 설정.
# 동서남북 회전시 바라보는 방향에 대한 좌표계 설정 ex) 북 -> 서 = (-1, 0)
# 현재 좌표에서 -1, 0 한 뒤 해당 좌표의 값이 1이면 (0보다 크면) 회전 및 회전 cnt + 1
# 0이면 좌표를 이동 후 좌표의 값을 2로 변환(가본 곳 체크) 후 회전 cnt = 0 및 가본 횟수 + 1
# 이를 계속 반복하며 회전 cnt = 4 이면 break;

n, m = map(int, input().split())
x, y, eye = map(int, input().split())

array = []
for i in range(n):
    array.append(list(map(int, input().split())))

array[x-1][y-1] = 2

spin = [3, -1, -1, -1]
move = [(0, 1), (1, 0), (0, -1), (-1, 0)]

spinCnt = 0
moveCnt = 0

print(move[eye[0]])

while(spinCnt < 4):
    eye += spin[eye]

    # 회전 후 해당 좌표 값이 0보다 크면 회전 및 회전 cnt + 1
    nx = x + move[eye]
    ny = y + move[eye]

    if array[nx][ny] > 0:
        eye += spin[eye]
        spinCnt += 1
        continue

    # 회전 후 해당 좌표 값이 0이면 이동 후 좌표의 값을 2로 변환
    if array[nx][ny] == 0:
        array[nx][ny] = 2
        spinCnt = 0
        moveCnt += 1
        x = nx
        y = ny
        continue

print(moveCnt)
